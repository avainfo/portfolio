{
  "projects": [
    {
      "title": "Amazon Meet",
      "path": "projects/amazon_meets",
      "description": "<h2>Mon projet de logiciel de visioconférence</h2>\n\n<p>J'ai développé un logiciel de visioconférence similaire à Google Meet, en exploitant les outils d'intelligence artificielle d'AWS. Ce logiciel intègre un système de traduction en temps réel, facilitant la communication entre des utilisateurs de langues différentes.</p>\n\n<h3>Problématiques rencontrées</h3>\n<ul>\n  <li><strong>Latence de la traduction :</strong> Il était essentiel d'assurer une fluidité des échanges en réduisant le temps de latence des traductions en temps réel.</li>\n  <li><strong>Précision des traductions :</strong> J'ai dû garantir la qualité et la précision des traductions pour éviter les incompréhensions lors des discussions.</li>\n  <li><strong>Intégration des API AWS AI :</strong> L'intégration et la configuration des services AWS AI, notamment AWS Transcribe et AWS Translate, ont représenté un défi technique important.</li>\n</ul>\n\n<h3>Solutions apportées</h3>\n<ul>\n  <li><strong>Optimisation des appels aux services AWS :</strong> J'ai mis en place des requêtes asynchrones et un système de mise en cache local pour réduire la latence.</li>\n  <li><strong>Amélioration de la précision :</strong> J'ai affiné les paramètres des services AWS afin d'augmenter la qualité des transcriptions et des traductions.</li>\n  <li><strong>Architecture modulaire :</strong> J'ai conçu une architecture modulaire qui permet de mettre à jour ou de remplacer les services d'IA de manière simple et efficace.</li>\n</ul>\n\n<h3>Compétences développées</h3>\n<ul>\n  <li>Intégration d'API d'intelligence artificielle (AWS Transcribe, AWS Translate, etc.)</li>\n  <li>Optimisation des performances des applications en temps réel</li>\n  <li>Développement de solutions de traduction automatique</li>\n  <li>Compétences en cloud computing avec AWS</li>\n</ul>"
    },
    {
      "title": "Miroir connecté",
      "path": "projects/connected_mirror",
      "description": "<h2>Mon projet de miroir connecté</h2>\n\n<p>J'ai conçu et développé un miroir connecté en utilisant un Raspberry Pi. Ce projet m'a permis de transformer un simple écran en un miroir intelligent capable d'afficher des informations dynamiques en temps réel, telles que la météo, l'heure, les actualités ou des widgets personnalisés.</p>\n\n<h3>Problématiques rencontrées</h3>\n<ul>\n  <li><strong>Affichage en mode miroir :</strong> J'ai dû configurer l'affichage de l'écran pour qu'il se comporte comme un miroir tout en rendant le texte et les images lisibles.</li>\n  <li><strong>Interface utilisateur réactive :</strong> Il a fallu concevoir une interface simple et intuitive tout en assurant la fluidité des animations et des mises à jour des widgets.</li>\n  <li><strong>Intégration des services en ligne :</strong> J'ai eu à connecter le miroir à des services externes pour afficher des informations en direct, comme la météo et les flux RSS d'actualités.</li>\n</ul>\n\n<h3>Solutions apportées</h3>\n<ul>\n  <li><strong>Personnalisation de l'interface :</strong> J'ai créé une interface utilisateur flexible et responsive, permettant d'afficher des widgets dynamiques et personnalisables.</li>\n  <li><strong>Utilisation de modules open-source :</strong> J'ai tiré parti de bibliothèques et d'outils open-source pour accélérer le développement, tout en adaptant le code aux besoins spécifiques du projet.</li>\n  <li><strong>Optimisation des performances :</strong> J'ai optimisé l'affichage et la gestion des ressources du Raspberry Pi pour éviter les ralentissements et garantir une expérience fluide.</li>\n</ul>\n\n<h3>Compétences développées</h3>\n<ul>\n  <li>Développement d'applications embarquées sur Raspberry Pi</li>\n  <li>Création d'interfaces utilisateur réactives et personnalisables</li>\n  <li>Intégration de services web (API météo, flux RSS, etc.)</li>\n  <li>Optimisation des performances des systèmes embarqués</li>\n</ul>"
    },
    {
      "title": "Remercee",
      "path": "projects/remercee",
      "description": "<h2>Mon projet Remercee</h2>\n\n<p>J'ai développé \"Remercee\", une application mobile en Flutter dédiée à l'évaluation des serveurs de restauration. Cette application permet aux clients de noter les serveurs grâce à un système de QR code scannable directement depuis leur smartphone. Les clients peuvent ainsi laisser des avis et des notes sur la qualité du service, ce qui facilite la recherche et l'identification des meilleurs serveurs pour les établissements de restauration.</p>\n\n<h3>Problématiques rencontrées</h3>\n<ul>\n  <li><strong>Génération et gestion des QR codes :</strong> Il a fallu mettre en place un système de génération unique de QR codes pour chaque serveur, tout en garantissant leur validité et leur sécurité.</li>\n  <li><strong>Synchronisation des notes en temps réel :</strong> Les notes devaient être mises à jour en temps réel pour permettre une visualisation instantanée des évaluations.</li>\n  <li><strong>Conception d'une interface simple et intuitive :</strong> L'application devait offrir une expérience utilisateur fluide et accessible à tous les profils de clients, sans nécessiter de formation préalable.</li>\n</ul>\n\n<h3>Solutions apportées</h3>\n<ul>\n  <li><strong>Utilisation de Flutter pour le développement cross-platform :</strong> J'ai opté pour Flutter afin de garantir des performances optimales sur Android et iOS avec un seul code source.</li>\n  <li><strong>Génération de QR codes sécurisés :</strong> J'ai mis en place un système de génération de QR codes unique pour chaque serveur, assurant l'authenticité et la traçabilité des évaluations.</li>\n  <li><strong>Base de données en temps réel :</strong> J'ai utilisé une base de données synchronisée en temps réel pour permettre la mise à jour des notes et des avis de manière instantanée, garantissant une réactivité optimale de l'application.</li>\n</ul>\n\n<h3>Compétences développées</h3>\n<ul>\n  <li>Développement mobile cross-platform avec Flutter</li>\n  <li>Génération et sécurisation des QR codes</li>\n  <li>Intégration et gestion de bases de données en temps réel</li>\n  <li>Conception d'une interface utilisateur intuitive et accessible</li>\n</ul>\n"
    },
    {
      "title": "The Transporter",
      "path": "projects/transporter",
      "description": "<h2>Mon projet The Transporter</h2>\n\n<p>J'ai développé \"The Transporter\", une application mobile en Flutter qui permet de comparer les prix et les options de transport tels que les vols, les trains, les taxis et d'autres moyens de transport. L'objectif de l'application est de simplifier la recherche de trajets en proposant des comparatifs clairs et des informations en temps réel, afin d'aider les utilisateurs à choisir la meilleure option en fonction du prix, du temps de trajet et de la disponibilité.</p>\n\n<h3>Problématiques rencontrées</h3>\n<ul>\n  <li><strong>Accès aux API de transport multiples :</strong> Il a fallu intégrer plusieurs API de services de transport (vols, trains, taxis, etc.), chacune avec ses propres spécificités et formats de données.</li>\n  <li><strong>Traitement des données en temps réel :</strong> Les données de transport (horaires, prix, disponibilités) changent constamment, nécessitant la mise en place de synchronisations régulières et rapides.</li>\n  <li><strong>Interface utilisateur intuitive :</strong> Il fallait concevoir une interface claire et fluide, permettant aux utilisateurs de comparer facilement les différentes options de transport et de naviguer rapidement dans l'application.</li>\n</ul>\n\n<h3>Solutions apportées</h3>\n<ul>\n  <li><strong>Intégration d'API tierces :</strong> J'ai mis en place un système modulaire d'intégration d'API, permettant de connecter et de synchroniser des données provenant de différents services de transport.</li>\n  <li><strong>Mise en cache et synchronisation en arrière-plan :</strong> Pour assurer des temps de réponse rapides, j'ai mis en place un système de cache local et de synchronisation en arrière-plan, garantissant l'actualisation des données de transport sans impacter l'expérience utilisateur.</li>\n  <li><strong>Interface utilisateur simple et fluide :</strong> J'ai conçu une interface intuitive avec des filtres, des comparateurs de prix et un système de tri personnalisé, rendant la recherche et la comparaison des transports rapide et efficace.</li>\n</ul>\n\n<h3>Compétences développées</h3>\n<ul>\n  <li>Développement mobile cross-platform avec Flutter</li>\n  <li>Intégration d'API de transport (vols, trains, taxis, etc.)</li>\n  <li>Optimisation des performances avec la mise en cache des données</li>\n  <li>Conception d'interfaces utilisateur UX/UI centrées sur la comparaison et la navigation rapide</li>\n</ul>"
    },
    {
      "title": "Ava Maths",
      "path": "projects/ava_maths",
      "description": "<h2>Mon projet Ava Maths</h2>\n\n<p>J'ai conçu \"Ava Maths\", une application mobile éducative développée en Flutter, visant à aider les jeunes à apprendre les opérations mathématiques de base de manière ludique et compétitive. L'application propose des exercices interactifs, des défis chronométrés et un système de score permettant aux utilisateurs de suivre leurs progrès et de se mesurer à d'autres joueurs.</p>\n\n<h3>Problématiques rencontrées</h3>\n<ul>\n  <li><strong>Création d'exercices dynamiques :</strong> Il a fallu générer des exercices aléatoires et adaptés au niveau de chaque utilisateur tout en garantissant la diversité et la pertinence des opérations proposées.</li>\n  <li><strong>Gamification de l'apprentissage :</strong> J'ai dû trouver des moyens de rendre l'apprentissage compétitif et motivant grâce à des systèmes de score, des classements et des récompenses virtuelles.</li>\n  <li><strong>Interface adaptée aux enfants :</strong> L'interface devait être simple, colorée et accessible aux enfants tout en respectant les principes de l'ergonomie et de l'expérience utilisateur.</li>\n</ul>\n\n<h3>Solutions apportées</h3>\n<ul>\n  <li><strong>Génération aléatoire des exercices :</strong> J'ai mis en place un système de génération dynamique d'exercices qui s'adapte au niveau de l'utilisateur et propose des défis variés sur les opérations de base (addition, soustraction, multiplication, division).</li>\n  <li><strong>Gamification et système de récompenses :</strong> J'ai ajouté un système de points, de classements et de défis quotidiens afin de motiver les utilisateurs à s'entraîner régulièrement.</li>\n  <li><strong>Interface ludique et intuitive :</strong> J'ai conçu une interface colorée et simple, adaptée aux enfants, avec des animations fluides et des visuels engageants pour maintenir leur attention.</li>\n</ul>\n\n<h3>Compétences développées</h3>\n<ul>\n  <li>Développement mobile cross-platform avec Flutter</li>\n  <li>Conception de systèmes de gamification (scores, défis, classements)</li>\n  <li>Génération dynamique d'exercices pédagogiques</li>\n  <li>Conception d'interfaces adaptées aux enfants (UX/UI Design)</li>\n</ul>\n"
    },
    {
      "title": "Kasa",
      "path": "projects/kasa",
      "description": "<h2>Mon projet Kasa</h2>\n\n<p>Dans le cadre de ma formation sur OpenClassrooms, j'ai eu l'opportunité de travailler sur le projet \"Kasa\", une refonte complète d'une application de location d'appartements. J'ai été chargé de développer l'intégralité de l'application front-end avec React en respectant les maquettes fournies sur Figma et en respectant des contraintes UX strictes.</p>\n\n<h3>Problématiques rencontrées</h3>\n<ul>\n  <li><strong>Absence de back-end :</strong> En l'absence de back-end opérationnel, j'ai dû travailler avec un fichier JSON contenant des données statiques des logements, ce qui a nécessité la mise en place d'un système de gestion des données locale.</li>\n  <li><strong>Composants réactifs et responsives :</strong> La création de composants dynamiques comme les galeries d'images, les \"Collapses\" (menus déroulants) et la gestion des états d'ouverture et de fermeture de ces composants.</li>\n  <li><strong>Animation et transitions CSS :</strong> Le respect des animations de transition des collapses et des galeries d'images a nécessité une gestion précise des animations et des transitions CSS.</li>\n</ul>\n\n<h3>Solutions apportées</h3>\n<ul>\n  <li><strong>Utilisation de React avec Vite :</strong> J'ai mis en place l'application à l'aide de Vite, ce qui a permis un temps de compilation plus rapide et un environnement de développement fluide.</li>\n  <li><strong>Composants réutilisables :</strong> J'ai découpé l'interface en composants réutilisables (Header, Footer, Gallery, Collapse, Card, etc.) pour assurer une structure de code propre et modulaire.</li>\n  <li><strong>Gestion du JSON en local :</strong> J'ai mis en place une logique de récupération et de traitement des données issues du fichier JSON, simulant des appels à une API.</li>\n  <li><strong>Animations et transitions CSS :</strong> J'ai utilisé SASS pour styliser l'application et j'ai mis en place les animations CSS requises, notamment pour les menus déroulants et les galeries d'images.</li>\n  <li><strong>Navigation avec React Router :</strong> J'ai configuré la navigation avec React Router, en ajoutant des routes dynamiques pour accéder aux détails de chaque logement.</li>\n</ul>\n\n<h3>Compétences développées</h3>\n<ul>\n  <li>Maîtrise de React et de la configuration avec Vite</li>\n  <li>Utilisation de React Router pour la navigation multi-pages</li>\n  <li>Création de composants réactifs et gestion des états locaux</li>\n  <li>Gestion des fichiers de données statiques (JSON) en local</li>\n  <li>Utilisation de SASS et d'animations CSS pour des transitions fluides</li>\n  <li>Pratique du responsive design pour rendre l'application compatible sur tous les écrans</li>\n</ul>"
    }
  ]
}